// Generated by gencpp from file autonomous_commands/DriveForTimeGoal.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_COMMANDS_MESSAGE_DRIVEFORTIMEGOAL_H
#define AUTONOMOUS_COMMANDS_MESSAGE_DRIVEFORTIMEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace autonomous_commands
{
template <class ContainerAllocator>
struct DriveForTimeGoal_
{
  typedef DriveForTimeGoal_<ContainerAllocator> Type;

  DriveForTimeGoal_()
    : cmd()
    , time(0)  {
    }
  DriveForTimeGoal_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , time(0)  {
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_type;
  _cmd_type cmd;

   typedef int64_t _time_type;
  _time_type time;




  typedef boost::shared_ptr< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DriveForTimeGoal_

typedef ::autonomous_commands::DriveForTimeGoal_<std::allocator<void> > DriveForTimeGoal;

typedef boost::shared_ptr< ::autonomous_commands::DriveForTimeGoal > DriveForTimeGoalPtr;
typedef boost::shared_ptr< ::autonomous_commands::DriveForTimeGoal const> DriveForTimeGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autonomous_commands

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'autonomous_commands': ['/Barn2ROS/devel/share/autonomous_commands/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bf86b3e04e7a2304090f4bfc4969256";
  }

  static const char* value(const ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bf86b3e04e7a230ULL;
  static const uint64_t static_value2 = 0x4090f4bfc4969256ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_commands/DriveForTimeGoal";
  }

  static const char* value(const ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
geometry_msgs/Twist cmd\n\
int64 time\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct DriveForTimeGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_commands::DriveForTimeGoal_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd);
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_COMMANDS_MESSAGE_DRIVEFORTIMEGOAL_H
